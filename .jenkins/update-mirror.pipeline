#!/usr/bin/env groovy
pipeline {
    agent any
    tools {
        maven 'maven-3.9.6'
        jdk 'ZULU8'
    }
    stages {

        stage('Checkout metaeffekt-core') {
            steps {
                script {
                    sh 'mkdir -p .metaeffekt-core'
                    dir ('.metaeffekt-core') {
                        withCredentials([usernamePassword(credentialsId: 'JenkinsGithubAccess', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            git url: 'https://github.com/org-metaeffekt/metaeffekt-core.git', branch: 'master', credentialsId: 'JenkinsGithubAccess'
                        }
                    }
                }
            }
        }

        stage('Checkout metaeffekt-artifact-analysis') {
            steps {
                script {
                    sh 'mkdir -p .metaeffekt-artifact-analysis'
                    dir ('.metaeffekt-terms-metadata') {
                        withCredentials([usernamePassword(credentialsId: 'JenkinsGithubAccess', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            git url: 'https://github.com/org-metaeffekt/metaeffekt-artifact-analysis.git', branch: 'main', credentialsId: 'JenkinsGithubAccess'
                        }
                    }
                }
            }
        }

        stage('Build metaeffekt-core (skipping tests and javadoc)') {
            steps {
                dir ('.metaeffekt-core') {
                    withMaven(maven: 'maven-3.9.6') {
                        sh 'mvn -B clean install -DskipTests -Dmaven.javadoc.skip=true'
                    }
                }
            }
        }

        stage('Build metaeffekt-artifact-analysis (skipping tests and javadoc)') {
            steps {
                dir ('.metaeffekt-terms-metadata') {
                    withMaven(maven: 'maven-3.9.6') {
                        sh 'mvn -B clean install -DskipTests -Dmaven.javadoc.skip=true'
                    }
                }
            }
        }

        stage('Update local mirror using mirror-download profile') {
            steps {
                script {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE', message: 'Could not update all data sources.') {
                        withCredentials([string(credentialsId: 'metaeffekt-nvd-apikey', variable: 'NVD_APIKEY')]) {
                            withMaven(maven: 'maven-3.9.6', mavenOpts: '-Xmx8g') {
                                sh 'mvn -B clean install -Pmirror-download -Dnvd.apikey=$NVD_APIKEY -Dae.core.version=HEAD-SNAPSHOT -Dae.artifact.analysis.version=HEAD-SNAPSHOT'
                            }
                        }
                    }
                }
            }
        }

        stage('Update local indexes using mirror-index profile') {
            steps {
                script {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE', message: 'Could not index all data sources.') {
                        withMaven(maven: 'maven-3.9.6', mavenOpts: '-Xmx8g') {
                            sh 'mvn -B clean install -Pmirror-index -Dae.core.version=HEAD-SNAPSHOT -Dae.artifact.analysis.version=HEAD-SNAPSHOT'
                        }
                    }
                }
            }
        }

        stage('Zip and push mirror to internal share') {
            steps {
                sh '''
                cd .database/ae-vulnerability-mirror
                rm -f index-database.zip || true
                zip -r index-database.zip index
                curl --create-dirs -T index-database.zip http://ae-scanner/upload/mirror/index/index-database.zip
                rm -f mirror-database.zip || true
                zip -r mirror-database.zip download
                curl --create-dirs -T mirror-database.zip http://ae-scanner/upload/mirror/download/mirror-database.zip
                '''
            }
        }

        // currently the index plugin does not allow different input (download) and output (index) dbs
        stage('Share download with old legacy indexer') {
            steps {
                sh '''
                rm -rf .database/ae-vulnerability-mirror_legacy/download
                mkdir -p .database/ae-vulnerability-mirror_legacy
                cp -R .database/ae-vulnerability-mirror/download .database/ae-vulnerability-mirror_legacy
                '''
            }
        }

        stage('Update local legacy indexes using mirror-index_legacy profile') {
            steps {
                script {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE', message: 'Could not index all data sources.') {
                        withMaven(maven: 'maven-3.9.6', mavenOpts: '-Xmx8g') {
                            sh 'mvn -B clean install -Pmirror-index_legacy -Dae.core.version=0.135.2 -Dae.artifact.analysis.version=0.135.5'
                        }
                    }
                }
            }
        }

        stage('Zip and push legacy mirror to internal share') {
            steps {
                sh '''
                cd .database/ae-vulnerability-mirror_legacy
                rm -f index-database_legacy.zip || true
                zip -r index-database_legacy.zip index
                curl --create-dirs -T index-database_legacy.zip http://ae-scanner/upload/mirror/index/index-database_legacy.zip
                '''
            }
        }
    }
}
